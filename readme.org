* Day 1 :: Depth Chart
** data :: ~depth_readings~
#+begin_html
<details>
  <summary>Click to see raw data</summary>
#+end_html

#+begin_src elixir :session depths
depth_readings = [182,
 188,
 204,
 203,
 205,
 206,
 208,
 216,
 217,
 218,
 219,
 225,
 226,
 207,
 204,
 205,
 217,
 255,
 254,
 270,
 261,
 262,
 264,
 265,
 255,
 257,
 249,
 248,
 249,
 250,
 265,
 286,
 308,
 309,
 317,
 326,
 328,
 316,
 318,
 333,
 330,
 293,
 292,
 294,
 321,
 313,
 307,
 301,
 296,
 291,
 295,
 297,
 304,
 314,
 331,
 330,
 342,
 325,
 324,
 354,
 360,
 368,
 371,
 372,
 373,
 374,
 381,
 384,
 387,
 389,
 390,
 392,
 393,
 382,
 361,
 350,
 356,
 357,
 359,
 363,
 371,
 391,
 398,
 402,
 403,
 397,
 394,
 397,
 396,
 398,
 399,
 393,
 411,
 417,
 428,
 429,
 456,
 446,
 451,
 459,
 456,
 460,
 458,
 451,
 455,
 452,
 446,
 451,
 448,
 444,
 476,
 478,
 480,
 503,
 502,
 504,
 496,
 511,
 518,
 531,
 543,
 544,
 516,
 512,
 511,
 514,
 524,
 522,
 523,
 535,
 558,
 576,
 589,
 584,
 580,
 582,
 581,
 580,
 571,
 570,
 578,
 616,
 609,
 610,
 603,
 604,
 614,
 615,
 616,
 614,
 612,
 604,
 601,
 606,
 604,
 600,
 599,
 600,
 609,
 614,
 607,
 631,
 629,
 631,
 637,
 653,
 661,
 660,
 661,
 705,
 721,
 719,
 722,
 707,
 720,
 725,
 721,
 729,
 730,
 729,
 730,
 718,
 728,
 733,
 709,
 712,
 699,
 670,
 671,
 670,
 655,
 641,
 658,
 661,
 659,
 648,
 649,
 644,
 643,
 642,
 643,
 636,
 656,
 660,
 670,
 677,
 679,
 676,
 658,
 659,
 651,
 656,
 637,
 632,
 625,
 624,
 585,
 590,
 591,
 594,
 595,
 596,
 607,
 584,
 586,
 587,
 597,
 589,
 588,
 589,
 599,
 597,
 606,
 592,
 612,
 614,
 608,
 602,
 601,
 574,
 567,
 557,
 535,
 533,
 534,
 535,
 509,
 520,
 525,
 539,
 535,
 546,
 551,
 566,
 571,
 564,
 567,
 556,
 566,
 567,
 566,
 579,
 610,
 613,
 620,
 621,
 598,
 599,
 626,
 633,
 659,
 641,
 642,
 643,
 641,
 642,
 646,
 661,
 662,
 668,
 674,
 676,
 681,
 689,
 690,
 689,
 677,
 697,
 700,
 712,
 702,
 704,
 707,
 708,
 705,
 706,
 709,
 704,
 705,
 706,
 705,
 698,
 694,
 693,
 694,
 692,
 689,
 686,
 688,
 694,
 720,
 721,
 733,
 732,
 716,
 702,
 704,
 710,
 701,
 698,
 703,
 704,
 702,
 703,
 723,
 713,
 722,
 724,
 739,
 740,
 741,
 743,
 741,
 727,
 724,
 704,
 699,
 715,
 710,
 699,
 698,
 691,
 694,
 682,
 683,
 684,
 682,
 656,
 657,
 662,
 664,
 668,
 662,
 665,
 649,
 667,
 666,
 667,
 639,
 637,
 639,
 620,
 618,
 621,
 617,
 604,
 605,
 606,
 601,
 603,
 606,
 609,
 610,
 611,
 615,
 617,
 615,
 621,
 619,
 621,
 612,
 602,
 601,
 617,
 618,
 631,
 626,
 633,
 609,
 607,
 610,
 611,
 610,
 615,
 619,
 622,
 621,
 622,
 626,
 637,
 613,
 603,
 612,
 614,
 611,
 607,
 628,
 639,
 643,
 644,
 643,
 642,
 641,
 642,
 641,
 642,
 648,
 649,
 652,
 654,
 657,
 659,
 682,
 687,
 688,
 689,
 678,
 697,
 699,
 703,
 720,
 711,
 712,
 714,
 713,
 699,
 698,
 707,
 710,
 702,
 694,
 684,
 682,
 676,
 680,
 679,
 662,
 666,
 668,
 681,
 671,
 665,
 666,
 662,
 629,
 641,
 632,
 633,
 632,
 641,
 644,
 641,
 647,
 643,
 641,
 642,
 643,
 645,
 647,
 646,
 645,
 648,
 649,
 648,
 637,
 604,
 605,
 600,
 601,
 599,
 598,
 597,
 591,
 592,
 590,
 591,
 565,
 576,
 577,
 578,
 581,
 583,
 586,
 587,
 598,
 604,
 607,
 604,
 602,
 609,
 606,
 609,
 620,
 621,
 629,
 622,
 620,
 618,
 620,
 632,
 654,
 660,
 661,
 658,
 657,
 656,
 680,
 682,
 688,
 680,
 673,
 663,
 665,
 668,
 663,
 669,
 670,
 662,
 668,
 665,
 672,
 678,
 676,
 679,
 680,
 673,
 674,
 677,
 678,
 679,
 680,
 681,
 659,
 664,
 662,
 657,
 664,
 663,
 666,
 696,
 712,
 708,
 709,
 710,
 725,
 729,
 735,
 731,
 732,
 749,
 746,
 726,
 727,
 732,
 741,
 734,
 733,
 723,
 722,
 720,
 722,
 719,
 711,
 695,
 696,
 699,
 700,
 701,
 724,
 725,
 722,
 723,
 715,
 716,
 717,
 714,
 715,
 717,
 716,
 715,
 723,
 728,
 729,
 733,
 734,
 735,
 736,
 748,
 788,
 794,
 795,
 793,
 792,
 803,
 805,
 804,
 805,
 804,
 806,
 805,
 784,
 792,
 778,
 777,
 787,
 799,
 794,
 808,
 811,
 813,
 815,
 812,
 809,
 833,
 859,
 863,
 864,
 866,
 865,
 863,
 850,
 845,
 844,
 854,
 860,
 861,
 865,
 869,
 851,
 850,
 853,
 874,
 875,
 876,
 875,
 876,
 875,
 879,
 880,
 888,
 891,
 890,
 902,
 904,
 892,
 893,
 892,
 900,
 905,
 918,
 925,
 924,
 923,
 914,
 924,
 925,
 926,
 952,
 953,
 951,
 947,
 957,
 971,
 968,
 982,
 971,
 974,
 975,
 958,
 943,
 950,
 934,
 940,
 949,
 947,
 941,
 972,
 971,
 967,
 969,
 968,
 964,
 972,
 966,
 976,
 975,
 962,
 959,
 962,
 967,
 965,
 966,
 963,
 959,
 960,
 959,
 961,
 962,
 949,
 950,
 956,
 957,
 961,
 953,
 949,
 956,
 954,
 955,
 919,
 921,
 913,
 925,
 921,
 945,
 947,
 948,
 963,
 976,
 974,
 980,
 981,
 982,
 978,
 982,
 988,
 985,
 995,
 994,
 981,
 985,
 980,
 984,
 999,
 1001,
 1002,
 1020,
 1021,
 1035,
 1044,
 1040,
 1060,
 1074,
 1075,
 1078,
 1056,
 1062,
 1059,
 1060,
 1058,
 1063,
 1066,
 1068,
 1069,
 1068,
 1082,
 1081,
 1082,
 1086,
 1075,
 1087,
 1085,
 1087,
 1097,
 1096,
 1098,
 1093,
 1102,
 1114,
 1119,
 1128,
 1127,
 1112,
 1113,
 1112,
 1114,
 1133,
 1138,
 1137,
 1144,
 1146,
 1144,
 1145,
 1148,
 1143,
 1150,
 1151,
 1153,
 1152,
 1153,
 1134,
 1124,
 1146,
 1145,
 1140,
 1143,
 1144,
 1143,
 1144,
 1148,
 1149,
 1151,
 1153,
 1152,
 1151,
 1155,
 1156,
 1155,
 1152,
 1187,
 1182,
 1201,
 1206,
 1211,
 1204,
 1205,
 1204,
 1203,
 1205,
 1206,
 1187,
 1188,
 1196,
 1206,
 1205,
 1208,
 1201,
 1218,
 1212,
 1220,
 1201,
 1204,
 1210,
 1228,
 1234,
 1237,
 1225,
 1224,
 1223,
 1207,
 1208,
 1207,
 1213,
 1192,
 1200,
 1198,
 1209,
 1197,
 1209,
 1215,
 1193,
 1234,
 1233,
 1216,
 1213,
 1235,
 1239,
 1237,
 1231,
 1235,
 1240,
 1253,
 1268,
 1270,
 1279,
 1278,
 1280,
 1285,
 1319,
 1323,
 1324,
 1329,
 1324,
 1330,
 1334,
 1308,
 1312,
 1308,
 1307,
 1286,
 1288,
 1294,
 1322,
 1325,
 1336,
 1324,
 1330,
 1331,
 1328,
 1342,
 1341,
 1343,
 1345,
 1351,
 1352,
 1358,
 1357,
 1363,
 1362,
 1358,
 1385,
 1384,
 1395,
 1394,
 1395,
 1402,
 1409,
 1377,
 1378,
 1340,
 1341,
 1339,
 1338,
 1335,
 1348,
 1351,
 1363,
 1358,
 1359,
 1335,
 1347,
 1337,
 1340,
 1339,
 1329,
 1340,
 1334,
 1337,
 1339,
 1340,
 1341,
 1345,
 1346,
 1349,
 1344,
 1345,
 1346,
 1354,
 1340,
 1315,
 1319,
 1321,
 1320,
 1333,
 1334,
 1328,
 1318,
 1309,
 1304,
 1324,
 1339,
 1314,
 1313,
 1310,
 1311,
 1314,
 1316,
 1317,
 1318,
 1319,
 1320,
 1328,
 1337,
 1350,
 1353,
 1347,
 1349,
 1338,
 1339,
 1336,
 1344,
 1329,
 1320,
 1322,
 1343,
 1346,
 1350,
 1306,
 1308,
 1306,
 1303,
 1320,
 1321,
 1320,
 1321,
 1320,
 1330,
 1328,
 1334,
 1350,
 1349,
 1348,
 1350,
 1347,
 1350,
 1351,
 1358,
 1356,
 1364,
 1374,
 1375,
 1354,
 1351,
 1360,
 1364,
 1348,
 1361,
 1356,
 1357,
 1354,
 1357,
 1352,
 1334,
 1335,
 1330,
 1355,
 1354,
 1353,
 1354,
 1355,
 1361,
 1360,
 1358,
 1356,
 1359,
 1371,
 1372,
 1378,
 1377,
 1376,
 1355,
 1357,
 1355,
 1356,
 1357,
 1364,
 1378,
 1379,
 1380,
 1374,
 1381,
 1389,
 1396,
 1402,
 1403,
 1384,
 1386,
 1387,
 1409,
 1413,
 1419,
 1420,
 1421,
 1427,
 1453,
 1456,
 1453,
 1425,
 1427,
 1428,
 1424,
 1420,
 1417,
 1421,
 1412,
 1413,
 1415,
 1414,
 1411,
 1412,
 1413,
 1425,
 1426,
 1440,
 1470,
 1461,
 1466,
 1457,
 1460,
 1494,
 1481,
 1483,
 1482,
 1481,
 1482,
 1481,
 1483,
 1499,
 1485,
 1486,
 1487,
 1488,
 1489,
 1468,
 1472,
 1469,
 1470,
 1479,
 1478,
 1479,
 1485,
 1461,
 1460,
 1456,
 1455,
 1456,
 1455,
 1449,
 1446,
 1448,
 1451,
 1452,
 1439,
 1440,
 1442,
 1448,
 1445,
 1432,
 1433,
 1434,
 1415,
 1420,
 1412,
 1413,
 1419,
 1420,
 1405,
 1401,
 1403,
 1377,
 1380,
 1382,
 1383,
 1379,
 1381,
 1403,
 1405,
 1428,
 1429,
 1431,
 1424,
 1415,
 1420,
 1424,
 1429,
 1439,
 1440,
 1438,
 1440,
 1448,
 1442,
 1441,
 1439,
 1441,
 1442,
 1444,
 1449,
 1450,
 1449,
 1446,
 1477,
 1466,
 1467,
 1496,
 1503,
 1529,
 1538,
 1539,
 1528,
 1558,
 1560,
 1561,
 1573,
 1587,
 1569,
 1566,
 1572,
 1577,
 1585,
 1602,
 1603,
 1606,
 1581,
 1598,
 1599,
 1593,
 1598,
 1595,
 1604,
 1607,
 1606,
 1607,
 1605,
 1614,
 1629,
 1636,
 1638,
 1656,
 1664,
 1668,
 1671,
 1687,
 1683,
 1700,
 1703,
 1706,
 1720,
 1719,
 1718,
 1720,
 1701,
 1700,
 1701,
 1702,
 1704,
 1707,
 1700,
 1712,
 1708,
 1712,
 1729,
 1728,
 1729,
 1730,
 1738,
 1741,
 1730,
 1733,
 1730,
 1729,
 1726,
 1728,
 1745,
 1755,
 1754,
 1755,
 1760,
 1753,
 1747,
 1746,
 1747,
 1749,
 1750,
 1748,
 1749,
 1743,
 1745,
 1754,
 1757,
 1763,
 1766,
 1775,
 1773,
 1774,
 1773,
 1746,
 1747,
 1732,
 1730,
 1709,
 1721,
 1727,
 1718,
 1717,
 1701,
 1700,
 1701,
 1705,
 1712,
 1723,
 1724,
 1725,
 1720,
 1727,
 1728,
 1746,
 1744,
 1760,
 1748,
 1747,
 1746,
 1771,
 1786,
 1784,
 1786,
 1783,
 1795,
 1793,
 1794,
 1808,
 1793,
 1808,
 1811,
 1807,
 1808,
 1806,
 1841,
 1860,
 1861,
 1840,
 1839,
 1831,
 1836,
 1829,
 1818,
 1816,
 1817,
 1846,
 1835,
 1827,
 1815,
 1816,
 1832,
 1831,
 1830,
 1831,
 1829,
 1828,
 1829,
 1831,
 1830,
 1838,
 1852,
 1853,
 1851,
 1865,
 1866,
 1889,
 1890,
 1888,
 1887,
 1879,
 1859,
 1860,
 1863,
 1867,
 1868,
 1860,
 1872,
 1873,
 1881,
 1895,
 1893,
 1892,
 1899,
 1901,
 1907,
 1916,
 1906,
 1916,
 1917,
 1928,
 1933,
 1921,
 1924,
 1925,
 1935,
 1952,
 1953,
 1959,
 1960,
 1958,
 1962,
 1988,
 1995,
 1985,
 1988,
 1986,
 1989,
 2003,
 2004,
 2009,
 2011,
 2020,
 2021,
 2040,
 2039,
 2024,
 2029,
 2030,
 2037,
 2038,
 2037,
 2040,
 2038,
 2042,
 2045,
 2046,
 2051,
 2046,
 2045,
 2034,
 2033,
 2011,
 2015,
 2025,
 2011,
 2012,
 2011,
 1993,
 2007,
 1999,
 1975,
 1970,
 1985,
 1990,
 1989,
 1986,
 1989,
 1991,
 1995,
 1978,
 1976,
 1956,
 1958,
 1945,
 1930,
 1933,
 1931,
 1926,
 1937,
 1936,
 1935,
 1942,
 1936,
 1934,
 1918,
 1919,
 1923,
 1929,
 1935,
 1952,
 1961,
 1959,
 1960,
 1947,
 1948,
 1949,
 1946,
 1944,
 1961,
 1929,
 1932,
 1944,
 1933,
 1928,
 1920,
 1889,
 1894,
 1886,
 1906,
 1900,
 1895,
 1890,
 1901,
 1904,
 1903,
 1898,
 1921,
 1922,
 1931,
 1933,
 1939,
 1940,
 1939,
 1927,
 1920,
 1934,
 1947,
 1946,
 1956,
 1955,
 1949,
 1951,
 1953,
 1951,
 1949,
 1952,
 1942,
 1945,
 1933,
 1934,
 1917,
 1927,
 1934,
 1913,
 1914,
 1911,
 1912,
 1920,
 1919,
 1915,
 1917,
 1943,
 1951,
 1952,
 1945,
 1950,
 1929,
 1926,
 1933,
 1935,
 1949,
 1947,
 1966,
 1967,
 1945,
 1972,
 1985,
 1962,
 1964,
 1956,
 1942,
 1943,
 1937,
 1936,
 1933,
 1941,
 1949,
 1965,
 1968,
 1969,
 1970,
 1957,
 1956,
 1957,
 1962,
 1939,
 1942,
 1957,
 1956,
 1961,
 1960,
 1959,
 1956,
 1957,
 1983,
 1981,
 1979,
 1976,
 1969,
 1974,
 1952,
 1938,
 1952,
 1955,
 1952,
 1958,
 1952,
 1964,
 1965,
 1956,
 1959,
 1960,
 1962,
 1961,
 1960,
 1967,
 1968,
 1979,
 1989,
 1990,
 1993,
 2004,
 2003,
 2012,
 2006,
 1994,
 1998,
 1988,
 1991,
 1987,
 1986,
 1987,
 1985,
 1982,
 1985,
 1988,
 1990,
 1984,
 1978,
 1967,
 1978,
 1990,
 1984,
 1985,
 1984,
 1985,
 2009,
 2007,
 2000,
 1992,
 2012,
 2011,
 2020,
 2021,
 2022,
 2017,
 2000,
 1975,
 1989,
 1988,
 1975,
 1954,
 1955,
 1947,
 1954,
 1971,
 1970,
 1973,
 1981,
 1982,
 1984,
 1996,
 1992,
 1994,
 1996,
 1997,
 2001,
 1998,
 2000,
 1998,
 1997,
 1999,
 2007,
 2001,
 2007,
 2005,
 2003,
 2001,
 2003,
 1999,
 1997,
 1980,
 1981,
 1999,
 2005,
 2011,
 2016,
 2017,
 2026,
 2027,
 2020,
 2021,
 2023,
 2024,
 2025,
 2024,
 2025,
 2029,
 2033,
 2035,
 2039,
 2051,
 2052,
 2054,
 2065,
 2082,
 2084,
 2101,
 2097,
 2096,
 2097,
 2092,
 2104,
 2105,
 2101,
 2092,
 2094,
 2100,
 2101,
 2095,
 2096,
 2093,
 2118,
 2116,
 2152,
 2161,
 2162,
 2163,
 2165,
 2174,
 2163,
 2183,
 2187,
 2155,
 2156,
 2158,
 2162,
 2155,
 2148,
 2147,
 2149,
 2148,
 2142,
 2144,
 2140,
 2129,
 2132,
 2133,
 2137,
 2143,
 2140,
 2150,
 2135,
 2134,
 2133,
 2136,
 2145,
 2136,
 2137,
 2140,
 2141,
 2118,
 2125,
 2106,
 2104,
 2089,
 2088,
 2076,
 2063,
 2060,
 2054,
 2047,
 2046,
 2047,
 2050,
 2051,
 2046,
 2051,
 2061,
 2060,
 2066,
 2068,
 2072,
 2073,
 2083,
 2098,
 2101,
 2096,
 2098,
 2099,
 2103,
 2093,
 2092,
 2111,
 2129,
 2152,
 2159,
 2155,
 2163,
 2155,
 2158,
 2163,
 2166,
 2170,
 2161,
 2155,
 2159,
 2147,
 2146,
 2154,
 2165,
 2172,
 2163,
 2179,
 2182,
 2180,
 2168,
 2172,
 2179,
 2181,
 2183,
 2176,
 2147,
 2170,
 2172,
 2173,
 2153,
 2158,
 2140,
 2135,
 2136,
 2134,
 2130,
 2134,
 2156,
 2161,
 2162,
 2163,
 2149,
 2150,
 2159,
 2160,
 2161,
 2178,
 2185,
 2183,
 2158,
 2173,
 2168,
 2170,
 2165,
 2181,
 2173,
 2175,
 2178,
 2183,
 2185,
 2184,
 2189,
 2202,
 2203,
 2191,
 2176,
 2177,
 2163,
 2150,
 2159,
 2158,
 2153,
 2139,
 2136,
 2135,
 2143,
 2155,
 2166,
 2171,
 2183,
 2190,
 2180,
 2183,
 2165,
 2166,
 2167,
 2168,
 2160,
 2161,
 2174,
 2175,
 2172,
 2176,
 2198,
 2205,
 2210,
 2211,
 2223,
 2249,
 2254,
 2267,
 2260,
 2263,
 2256,
 2258,
 2265,
 2278,
 2279,
 2278,
 2271,
 2273,
 2278,
 2279,
 2272,
 2274,
 2286,
 2273,
 2279,
 2278,
 2264,
 2263,
 2264,
 2274,
 2287,
 2308,
 2309,
 2310,
 2305,
 2304,
 2303,
 2305,
 2317,
 2316,
 2318,
 2319,
 2320,
 2322,
 2326,
 2335,
 2359,
 2351,
 2353,
 2354,
 2356,
 2341,
 2338,
 2333,
 2334,
 2333,
 2344,
 2334,
 2344,
 2323,
 2341,
 2325,
 2317,
 2327,
 2323,
 2321,
 2312,
 2297,
 2302,
 2304,
 2315,
 2308,
 2317,
 2330,
 2350,
 2360,
 2341,
 2342,
 2341,
 2342,
 2357,
 2363,
 2353,
 2355,
 2352,
 2354,
 2360,
 2361,
 2348,
 2354,
 2355,
 2345,
 2346,
 2347,
 2360,
 2358,
 2360,
 2361,
 2364,
 2365,
 2354,
 2361,
 2362,
 2373,
 2375,
 2373,
 2365,
 2346,
 2362,
 2359,
 2357,
 2373,
 2397,
 2398,
 2394,
 2396,
 2401,
 2421,
 2414,
 2420,
 2406,
 2407,
 2403,
 2402,
 2401,
 2397,
 2396,
 2420,
 2444,
 2446,
 2428,
 2427,
 2428,
 2431,
 2429,
 2433,
 2463,
 2487,
 2495,
 2524,
 2535,
 2542,
 2552,
 2575,
 2573,
 2574,
 2568,
 2576,
 2583,
]
#+end_src

#+RESULTS: depths-list
: [182, 188, 204, 203, 205, 206, 208, 216, 217, 218, 219, 225, 226, 207, 204, 205, 
:  217, 255, 254, 270, 261, 262, 264, 265, 255, 257, 249, 248, 249, 250, 265, 286, 
:  308, 309, 317, 326, 328, 316, 318, 333, 330, 293, 292, 294, 321, 313, 307, 301, 
:  296, 291, ...]

#+begin_html
</details>
#+end_html
** pt 1 :: depth deltas
#+begin_src elixir :session depths
depth_readings
|> Enum.reduce(%{count: 0}, fn (depth, worksheet) ->
  case worksheet[:prior] do
    prior_reading when is_number(prior_reading) and depth > prior_reading ->
      Map.merge(worksheet, %{prior: depth, count: worksheet[:count] + 1})
    _ ->
      Map.merge(worksheet, %{prior: depth})
  end
end)
|> Map.get(:count)
#+end_src

#+RESULTS:
: 1215

** pt 2 :: 3-reading windows
#+begin_src elixir :session depths
depth_readings
|> Enum.reduce(%{count: 0}, fn (a, worksheet) ->
  case worksheet do
    %{ b: b, c: c, prior: prior } when (a + b + c) > prior ->
      Map.merge(worksheet, %{b: a, c: b, prior: a + b + c, count: worksheet[:count] + 1})
    %{ b: b, c: c } ->
      Map.merge(worksheet, %{b: a, c: b, prior: a + b + c})
    %{ b: b } ->
      Map.merge(worksheet, %{b: a, c: b})
    _ ->
      Map.merge(worksheet, %{b: a})
  end
end)
|> Map.get(:count)
#+end_src

#+RESULTS:
: 1150

* Day 2 :: Piloting the sub
** data :: ~commands~
#+begin_html
<details>
  <summary>Click to see raw data</summary>
#+end_html

#+begin_src elixir :session pilot
commands = [
  {"forward", 7},
  {"forward", 9},
  {"forward", 3},
  {"down", 5},
  {"down", 9},
  {"forward", 6},
  {"down", 2},
  {"forward", 2},
  {"forward", 8},
  {"forward", 3},
  {"forward", 5},
  {"forward", 5},
  {"forward", 8},
  {"down", 6},
  {"forward", 8},
  {"forward", 2},
  {"up", 8},
  {"down", 8},
  {"forward", 6},
  {"down", 4},
  {"down", 5},
  {"forward", 2},
  {"down", 6},
  {"forward", 7},
  {"down", 9},
  {"forward", 9},
  {"down", 2},
  {"down", 7},
  {"up", 6},
  {"up", 3},
  {"up", 7},
  {"down", 9},
  {"forward", 1},
  {"forward", 1},
  {"down", 4},
  {"down", 9},
  {"forward", 4},
  {"up", 4},
  {"forward", 8},
  {"forward", 9},
  {"down", 7},
  {"down", 4},
  {"up", 6},
  {"down", 8},
  {"down", 2},
  {"forward", 8},
  {"forward", 6},
  {"down", 3},
  {"forward", 2},
  {"forward", 6},
  {"down", 3},
  {"forward", 1},
  {"forward", 8},
  {"down", 8},
  {"down", 9},
  {"forward", 5},
  {"forward", 4},
  {"forward", 8},
  {"down", 7},
  {"forward", 4},
  {"forward", 3},
  {"forward", 6},
  {"down", 3},
  {"forward", 6},
  {"forward", 6},
  {"down", 9},
  {"down", 9},
  {"down", 9},
  {"down", 2},
  {"down", 7},
  {"down", 4},
  {"forward", 3},
  {"up", 7},
  {"up", 3},
  {"down", 1},
  {"forward", 4},
  {"up", 9},
  {"forward", 4},
  {"forward", 2},
  {"down", 2},
  {"forward", 9},
  {"up", 4},
  {"forward", 5},
  {"down", 8},
  {"up", 7},
  {"down", 5},
  {"down", 1},
  {"up", 7},
  {"up", 4},
  {"forward", 5},
  {"up", 8},
  {"up", 3},
  {"down", 2},
  {"down", 1},
  {"down", 2},
  {"forward", 3},
  {"up", 1},
  {"forward", 1},
  {"forward", 1},
  {"down", 1},
  {"down", 6},
  {"down", 6},
  {"up", 4},
  {"down", 4},
  {"down", 4},
  {"forward", 6},
  {"down", 6},
  {"forward", 7},
  {"forward", 5},
  {"up", 7},
  {"down", 9},
  {"down", 6},
  {"forward", 5},
  {"forward", 6},
  {"forward", 2},
  {"down", 4},
  {"forward", 5},
  {"forward", 8},
  {"down", 8},
  {"down", 6},
  {"forward", 2},
  {"forward", 8},
  {"down", 3},
  {"forward", 6},
  {"down", 1},
  {"forward", 5},
  {"down", 8},
  {"up", 1},
  {"forward", 6},
  {"down", 7},
  {"forward", 4},
  {"down", 8},
  {"down", 8},
  {"forward", 8},
  {"down", 6},
  {"down", 3},
  {"forward", 2},
  {"forward", 8},
  {"forward", 9},
  {"forward", 4},
  {"forward", 3},
  {"down", 4},
  {"forward", 3},
  {"down", 9},
  {"down", 1},
  {"forward", 2},
  {"forward", 3},
  {"forward", 7},
  {"down", 1},
  {"forward", 6},
  {"forward", 8},
  {"forward", 6},
  {"forward", 2},
  {"down", 8},
  {"up", 9},
  {"forward", 6},
  {"forward", 8},
  {"down", 7},
  {"down", 5},
  {"up", 4},
  {"forward", 9},
  {"up", 7},
  {"up", 3},
  {"forward", 3},
  {"down", 6},
  {"forward", 4},
  {"forward", 2},
  {"down", 3},
  {"forward", 9},
  {"forward", 5},
  {"up", 7},
  {"down", 9},
  {"up", 4},
  {"down", 3},
  {"forward", 8},
  {"up", 1},
  {"forward", 2},
  {"forward", 8},
  {"forward", 8},
  {"forward", 5},
  {"down", 7},
  {"up", 6},
  {"down", 9},
  {"down", 4},
  {"forward", 2},
  {"down", 5},
  {"down", 2},
  {"down", 2},
  {"forward", 6},
  {"down", 2},
  {"forward", 9},
  {"forward", 1},
  {"up", 1},
  {"forward", 4},
  {"down", 1},
  {"forward", 3},
  {"down", 3},
  {"forward", 4},
  {"up", 5},
  {"up", 3},
  {"forward", 6},
  {"forward", 8},
  {"forward", 2},
  {"forward", 6},
  {"up", 5},
  {"down", 9},
  {"down", 8},
  {"forward", 3},
  {"down", 5},
  {"forward", 8},
  {"forward", 1},
  {"down", 9},
  {"up", 3},
  {"down", 2},
  {"down", 9},
  {"up", 8},
  {"down", 2},
  {"up", 7},
  {"up", 2},
  {"up", 3},
  {"down", 9},
  {"down", 1},
  {"down", 7},
  {"down", 1},
  {"forward", 1},
  {"down", 9},
  {"down", 6},
  {"forward", 3},
  {"up", 7},
  {"up", 8},
  {"down", 5},
  {"down", 6},
  {"up", 2},
  {"forward", 8},
  {"down", 4},
  {"up", 1},
  {"forward", 4},
  {"up", 4},
  {"forward", 2},
  {"down", 4},
  {"forward", 4},
  {"down", 9},
  {"up", 4},
  {"forward", 8},
  {"up", 7},
  {"forward", 1},
  {"down", 3},
  {"up", 7},
  {"forward", 5},
  {"down", 5},
  {"forward", 2},
  {"forward", 7},
  {"forward", 3},
  {"down", 8},
  {"forward", 4},
  {"forward", 9},
  {"up", 2},
  {"down", 4},
  {"down", 5},
  {"forward", 4},
  {"down", 4},
  {"up", 6},
  {"down", 8},
  {"up", 1},
  {"down", 1},
  {"up", 6},
  {"up", 6},
  {"down", 7},
  {"down", 7},
  {"forward", 2},
  {"forward", 4},
  {"forward", 8},
  {"down", 8},
  {"down", 4},
  {"down", 4},
  {"down", 7},
  {"forward", 4},
  {"down", 3},
  {"forward", 5},
  {"forward", 5},
  {"forward", 7},
  {"down", 7},
  {"forward", 1},
  {"down", 8},
  {"up", 4},
  {"up", 9},
  {"up", 3},
  {"up", 6},
  {"forward", 5},
  {"forward", 5},
  {"forward", 4},
  {"forward", 9},
  {"down", 9},
  {"forward", 4},
  {"forward", 1},
  {"up", 8},
  {"up", 2},
  {"down", 9},
  {"up", 4},
  {"forward", 2},
  {"up", 8},
  {"forward", 6},
  {"forward", 2},
  {"up", 9},
  {"down", 3},
  {"forward", 3},
  {"up", 7},
  {"down", 7},
  {"forward", 4},
  {"forward", 7},
  {"forward", 3},
  {"down", 4},
  {"down", 5},
  {"forward", 7},
  {"up", 3},
  {"up", 1},
  {"down", 4},
  {"forward", 6},
  {"down", 1},
  {"forward", 1},
  {"down", 4},
  {"down", 3},
  {"forward", 9},
  {"forward", 4},
  {"down", 9},
  {"down", 3},
  {"forward", 2},
  {"forward", 5},
  {"forward", 6},
  {"down", 3},
  {"forward", 5},
  {"down", 9},
  {"forward", 2},
  {"forward", 9},
  {"down", 7},
  {"down", 4},
  {"down", 3},
  {"down", 1},
  {"up", 2},
  {"forward", 6},
  {"forward", 4},
  {"down", 9},
  {"down", 2},
  {"forward", 2},
  {"forward", 9},
  {"down", 3},
  {"forward", 8},
  {"down", 8},
  {"forward", 5},
  {"down", 4},
  {"forward", 4},
  {"up", 6},
  {"up", 3},
  {"down", 3},
  {"down", 9},
  {"forward", 5},
  {"forward", 8},
  {"down", 2},
  {"forward", 9},
  {"forward", 5},
  {"up", 9},
  {"forward", 2},
  {"forward", 3},
  {"forward", 4},
  {"up", 8},
  {"up", 1},
  {"up", 6},
  {"down", 5},
  {"down", 8},
  {"down", 4},
  {"forward", 6},
  {"up", 2},
  {"forward", 1},
  {"forward", 7},
  {"up", 8},
  {"forward", 5},
  {"up", 9},
  {"forward", 7},
  {"down", 6},
  {"up", 5},
  {"up", 7},
  {"up", 1},
  {"down", 3},
  {"up", 6},
  {"forward", 1},
  {"up", 1},
  {"forward", 2},
  {"forward", 4},
  {"forward", 5},
  {"up", 3},
  {"up", 8},
  {"up", 1},
  {"up", 6},
  {"up", 3},
  {"down", 5},
  {"down", 4},
  {"up", 8},
  {"down", 9},
  {"up", 7},
  {"down", 6},
  {"down", 9},
  {"forward", 5},
  {"forward", 3},
  {"down", 9},
  {"down", 3},
  {"down", 6},
  {"up", 3},
  {"up", 8},
  {"down", 4},
  {"down", 1},
  {"up", 9},
  {"up", 9},
  {"forward", 8},
  {"down", 7},
  {"forward", 1},
  {"forward", 4},
  {"down", 8},
  {"forward", 2},
  {"down", 4},
  {"forward", 7},
  {"forward", 3},
  {"forward", 5},
  {"forward", 1},
  {"up", 2},
  {"down", 9},
  {"down", 5},
  {"up", 6},
  {"down", 3},
  {"forward", 1},
  {"up", 9},
  {"forward", 6},
  {"forward", 1},
  {"forward", 4},
  {"up", 7},
  {"forward", 6},
  {"down", 1},
  {"forward", 9},
  {"forward", 1},
  {"forward", 3},
  {"down", 9},
  {"down", 8},
  {"down", 5},
  {"forward", 4},
  {"down", 7},
  {"up", 1},
  {"forward", 8},
  {"up", 4},
  {"forward", 6},
  {"down", 2},
  {"forward", 4},
  {"forward", 7},
  {"down", 8},
  {"forward", 6},
  {"down", 7},
  {"forward", 7},
  {"up", 7},
  {"forward", 4},
  {"down", 8},
  {"down", 8},
  {"forward", 8},
  {"forward", 6},
  {"down", 9},
  {"down", 8},
  {"down", 6},
  {"down", 2},
  {"down", 4},
  {"forward", 7},
  {"forward", 3},
  {"down", 8},
  {"down", 5},
  {"forward", 2},
  {"down", 9},
  {"down", 7},
  {"up", 1},
  {"up", 5},
  {"forward", 6},
  {"up", 8},
  {"up", 7},
  {"up", 4},
  {"down", 6},
  {"down", 6},
  {"down", 8},
  {"down", 9},
  {"down", 2},
  {"forward", 6},
  {"forward", 6},
  {"forward", 2},
  {"up", 9},
  {"forward", 6},
  {"forward", 9},
  {"forward", 8},
  {"down", 5},
  {"down", 3},
  {"forward", 1},
  {"forward", 8},
  {"forward", 1},
  {"forward", 3},
  {"down", 4},
  {"forward", 5},
  {"forward", 1},
  {"forward", 6},
  {"down", 8},
  {"down", 9},
  {"forward", 3},
  {"forward", 2},
  {"forward", 1},
  {"forward", 3},
  {"up", 7},
  {"down", 7},
  {"down", 2},
  {"forward", 3},
  {"down", 5},
  {"down", 2},
  {"down", 7},
  {"down", 9},
  {"down", 5},
  {"down", 7},
  {"down", 9},
  {"up", 7},
  {"forward", 7},
  {"forward", 9},
  {"forward", 8},
  {"forward", 5},
  {"down", 1},
  {"up", 6},
  {"up", 6},
  {"forward", 5},
  {"up", 6},
  {"down", 8},
  {"up", 6},
  {"forward", 2},
  {"down", 9},
  {"down", 5},
  {"up", 8},
  {"up", 7},
  {"down", 8},
  {"down", 7},
  {"up", 3},
  {"down", 5},
  {"forward", 6},
  {"forward", 2},
  {"down", 6},
  {"forward", 6},
  {"forward", 1},
  {"forward", 5},
  {"forward", 3},
  {"down", 4},
  {"forward", 3},
  {"down", 1},
  {"up", 7},
  {"forward", 3},
  {"forward", 9},
  {"forward", 3},
  {"forward", 4},
  {"down", 9},
  {"forward", 6},
  {"down", 1},
  {"up", 6},
  {"forward", 2},
  {"forward", 1},
  {"down", 2},
  {"down", 1},
  {"down", 9},
  {"forward", 1},
  {"up", 8},
  {"down", 1},
  {"up", 3},
  {"forward", 3},
  {"forward", 1},
  {"up", 6},
  {"down", 1},
  {"down", 7},
  {"down", 2},
  {"forward", 5},
  {"down", 4},
  {"forward", 4},
  {"forward", 9},
  {"down", 7},
  {"forward", 6},
  {"down", 4},
  {"forward", 8},
  {"down", 5},
  {"forward", 6},
  {"down", 6},
  {"down", 6},
  {"down", 9},
  {"forward", 3},
  {"forward", 2},
  {"forward", 7},
  {"forward", 6},
  {"forward", 8},
  {"up", 6},
  {"forward", 7},
  {"down", 2},
  {"up", 4},
  {"forward", 6},
  {"forward", 3},
  {"forward", 9},
  {"down", 1},
  {"forward", 9},
  {"down", 1},
  {"forward", 6},
  {"down", 9},
  {"forward", 7},
  {"forward", 9},
  {"forward", 6},
  {"up", 3},
  {"down", 3},
  {"forward", 3},
  {"up", 1},
  {"down", 8},
  {"forward", 7},
  {"down", 4},
  {"forward", 7},
  {"forward", 7},
  {"down", 1},
  {"forward", 5},
  {"down", 6},
  {"forward", 6},
  {"down", 8},
  {"down", 2},
  {"down", 7},
  {"forward", 9},
  {"forward", 7},
  {"forward", 2},
  {"down", 5},
  {"forward", 7},
  {"forward", 8},
  {"forward", 5},
  {"forward", 5},
  {"up", 1},
  {"down", 1},
  {"up", 4},
  {"forward", 5},
  {"forward", 8},
  {"down", 4},
  {"up", 8},
  {"forward", 8},
  {"up", 2},
  {"down", 1},
  {"down", 9},
  {"up", 9},
  {"down", 9},
  {"forward", 3},
  {"forward", 1},
  {"down", 7},
  {"down", 2},
  {"forward", 5},
  {"up", 7},
  {"forward", 9},
  {"forward", 1},
  {"down", 4},
  {"down", 8},
  {"down", 2},
  {"up", 1},
  {"up", 6},
  {"forward", 9},
  {"down", 3},
  {"down", 2},
  {"forward", 5},
  {"forward", 4},
  {"down", 5},
  {"down", 4},
  {"up", 4},
  {"forward", 4},
  {"down", 3},
  {"up", 3},
  {"down", 7},
  {"down", 7},
  {"forward", 1},
  {"forward", 4},
  {"forward", 7},
  {"forward", 5},
  {"down", 4},
  {"down", 7},
  {"forward", 1},
  {"forward", 9},
  {"down", 4},
  {"forward", 8},
  {"up", 4},
  {"down", 9},
  {"down", 9},
  {"up", 6},
  {"up", 3},
  {"forward", 2},
  {"forward", 3},
  {"up", 7},
  {"forward", 7},
  {"down", 4},
  {"forward", 5},
  {"forward", 5},
  {"up", 2},
  {"down", 5},
  {"down", 9},
  {"forward", 9},
  {"forward", 7},
  {"forward", 1},
  {"up", 5},
  {"up", 5},
  {"forward", 8},
  {"forward", 3},
  {"forward", 2},
  {"down", 4},
  {"down", 6},
  {"down", 2},
  {"forward", 5},
  {"down", 3},
  {"down", 9},
  {"forward", 8},
  {"forward", 7},
  {"forward", 7},
  {"down", 1},
  {"up", 3},
  {"down", 8},
  {"down", 9},
  {"forward", 6},
  {"up", 6},
  {"down", 6},
  {"forward", 2},
  {"forward", 3},
  {"forward", 7},
  {"up", 8},
  {"down", 8},
  {"down", 7},
  {"forward", 2},
  {"down", 2},
  {"up", 7},
  {"up", 9},
  {"forward", 1},
  {"forward", 1},
  {"forward", 1},
  {"forward", 1},
  {"forward", 1},
  {"up", 8},
  {"down", 3},
  {"up", 8},
  {"down", 5},
  {"down", 3},
  {"up", 4},
  {"forward", 4},
  {"down", 3},
  {"down", 4},
  {"down", 3},
  {"up", 3},
  {"down", 3},
  {"up", 2},
  {"up", 6},
  {"down", 9},
  {"down", 6},
  {"up", 8},
  {"up", 7},
  {"down", 1},
  {"down", 7},
  {"down", 3},
  {"forward", 3},
  {"forward", 5},
  {"down", 4},
  {"down", 7},
  {"forward", 1},
  {"forward", 8},
  {"up", 9},
  {"up", 2},
  {"forward", 3},
  {"up", 1},
  {"forward", 7},
  {"down", 7},
  {"down", 5},
  {"forward", 9},
  {"up", 9},
  {"forward", 3},
  {"down", 2},
  {"up", 4},
  {"down", 2},
  {"down", 1},
  {"down", 9},
  {"down", 9},
  {"forward", 3},
  {"forward", 4},
  {"down", 2},
  {"down", 6},
  {"up", 8},
  {"down", 5},
  {"forward", 7},
  {"forward", 4},
  {"up", 3},
  {"forward", 2},
  {"down", 4},
  {"down", 8},
  {"forward", 4},
  {"forward", 6},
  {"forward", 8},
  {"down", 6},
  {"down", 8},
  {"up", 2},
  {"forward", 5},
  {"up", 7},
  {"down", 9},
  {"down", 6},
  {"forward", 7},
  {"up", 3},
  {"down", 9},
  {"forward", 2},
  {"down", 6},
  {"up", 6},
  {"down", 6},
  {"down", 3},
  {"down", 2},
  {"down", 8},
  {"down", 4},
  {"forward", 8},
  {"up", 7},
  {"forward", 9},
  {"forward", 4},
  {"down", 3},
  {"forward", 3},
  {"down", 9},
  {"down", 2},
  {"forward", 2},
  {"forward", 1},
  {"down", 4},
  {"down", 3},
  {"down", 8},
  {"up", 6},
  {"down", 4},
  {"forward", 3},
  {"down", 7},
  {"forward", 8},
  {"down", 7},
  {"forward", 6},
  {"forward", 2},
  {"forward", 7},
  {"forward", 6},
  {"forward", 4},
  {"up", 4},
  {"forward", 2},
  {"down", 4},
  {"down", 2},
  {"forward", 3},
  {"down", 2},
  {"up", 9},
  {"down", 6},
  {"forward", 5},
  {"up", 6},
  {"forward", 1},
  {"up", 1},
  {"down", 3},
  {"up", 4},
  {"forward", 1},
  {"down", 6},
  {"forward", 9},
  {"up", 2},
  {"forward", 4},
  {"up", 9},
  {"up", 5},
  {"down", 5},
  {"forward", 3},
  {"down", 9},
  {"forward", 5},
  {"down", 3},
  {"forward", 7},
  {"forward", 5},
  {"forward", 9},
  {"up", 5},
  {"down", 4},
  {"down", 2},
  {"forward", 9},
  {"down", 3},
  {"down", 8},
  {"down", 9},
  {"forward", 2},
  {"down", 8},
  {"up", 6},
  {"down", 4},
  {"down", 2},
  {"up", 9},
  {"forward", 8},
  {"forward", 8},
  {"down", 8},
  {"forward", 4},
  {"down", 7},
  {"forward", 2},
  {"up", 7},
  {"forward", 7},
  {"down", 4},
  {"forward", 4},
  {"down", 3},
  {"forward", 9},
  {"down", 9},
  {"forward", 6},
  {"down", 5},
  {"down", 9},
  {"up", 5},
  {"forward", 7},
  {"forward", 2},
  {"down", 3},
  {"down", 7},
  {"down", 2},
  {"forward", 3},
  {"down", 4},
  {"up", 3},
  {"down", 1},
  {"forward", 9},
  {"down", 4},
  {"down", 8},
  {"up", 9},
  {"forward", 7},
  {"down", 8},
  {"forward", 9},
  {"down", 2},
  {"up", 2},
  {"down", 1},
  {"down", 1},
  {"forward", 6},
  {"forward", 2},
  {"forward", 3},
  {"down", 5},
  {"down", 1},
  {"down", 1},
  {"up", 4},
  {"forward", 8},
  {"down", 3},
  {"down", 1},
  {"forward", 9},
  {"forward", 7},
  {"forward", 2},
  {"up", 8},
  {"up", 6},
  {"down", 7},
  {"down", 6},
  {"forward", 3},
  {"down", 2},
  {"down", 9},
  {"up", 7},
  {"forward", 5},
  {"up", 9},
  {"down", 9},
  {"down", 4},
  {"down", 8},
  {"down", 5},
  {"down", 8},
  {"down", 8},
  {"forward", 6},
  {"forward", 1},
  {"forward", 4},
  {"forward", 7},
  {"down", 7},
  {"down", 6},
  {"forward", 4},
  {"forward", 7},
  {"forward", 6},
  {"down", 7},
  {"forward", 4},
  {"forward", 9},
  {"up", 3},
  {"forward", 9},
  {"forward", 5},
  {"forward", 1},
  {"up", 2},
  {"down", 1},
  {"down", 5},
  {"forward", 9},
  {"up", 4},
  {"forward", 6},
  {"up", 3},
  {"up", 6},
  {"forward", 8},
  {"down", 6},
  {"forward", 5},
  {"down", 3},
  {"forward", 2},
  {"forward", 7},
  {"down", 4},
  {"up", 8},
  {"forward", 6},
  {"up", 7},
  {"up", 9},
  {"forward", 3},
  {"down", 3},
  {"down", 7},
  {"down", 7},
  {"down", 1},
  {"down", 6},
  {"down", 9},
  {"up", 1},
  {"forward", 6},
  {"forward", 6},
  {"down", 3},
  {"forward", 7},
  {"down", 8},
  {"forward", 1},
  {"down", 7},
  {"down", 4},
  {"down", 3},
  {"down", 4},
  {"down", 4},
  {"forward", 7},
  {"down", 3},
  {"forward", 6},
  {"up", 9},
  {"forward", 3}
]
#+end_src

#+RESULTS:
#+begin_example
[
  {"forward", 7},
  {"forward", 9},
  {"forward", 3},
  {"down", 5},
  {"down", 9}, 
  {"forward", 6},
  {"down", 2},
  {"forward", 2},
  {"forward", 8},
  {"forward", 3},
  {"forward", 5},
  {"forward", 5},
  {"forward", 8},
  {"down", 6},
  {"forward", 8},
  {"forward", 2},
  {"up", 8},
  {"down", 8},
  {"forward", 6},
  {"down", 4},
  {"down", 5},
  {"forward", 2},
  {"down", 6},
  {"forward", 7},
  {"down", 9},
  {"forward", 9},
  {"down", 2},
  {"down", 7},
  {"up", 6},
  {"up", 3},
  {"up", 7},
  {"down", 9},
  {"forward", 1},
  {"forward", 1},
  {"down", 4},
  {"down", 9},
  {"forward", 4},
  {"up", 4},
  {"forward", 8},
  {"forward", 9},
  {"down", 7},
  {"down", 4},
  {"up", 6},
  {"down", 8},
  {"down", 2},
  {"forward", 8},
  {"forward", 6},
  {"down", 3},
  {"forward", ...},
  {...},
  ...
]
#+end_example

#+begin_html
</details>
#+end_html

** pt 1 :: depth and distance
#+begin_src elixir :session pilot
%{ distance: distance, depth: depth} = commands
|> Enum.reduce(%{distance: 0, depth: 0}, fn ({dir, amt}, worksheet) ->
  case dir do
    "forward" ->
      Map.merge(worksheet, %{ distance: worksheet[:distance] + amt })
    "down" ->
      Map.merge(worksheet, %{ depth: worksheet[:depth] + amt })
    "up" ->
      Map.merge(worksheet, %{ depth: worksheet[:depth] - amt })
  end
end)

distance * depth
#+end_src

#+RESULTS:
: 2120749

** pt 2 :: now add direction

#+begin_src elixir :session pilot
%{ distance: distance, depth: depth} = commands
|> Enum.reduce(%{distance: 0, depth: 0, aim: 0}, fn ({dir, amt}, worksheet) ->
  case dir do
    "forward" ->
      new_distance = worksheet[:distance] + amt
      delta_depth = worksheet[:aim] * amt
      new_depth = worksheet[:depth] + delta_depth
      Map.merge(worksheet, %{ distance: new_distance, depth: new_depth })
    "down" ->
      Map.merge(worksheet, %{ aim: worksheet[:aim] + amt })
    "up" ->
      Map.merge(worksheet, %{ aim: worksheet[:aim] - amt })
  end
end)

distance * depth
#+end_src

#+RESULTS:
: 2138382217

* Day 3 :: what the digit
** data :: ~digits~ (list of strings) and ~zeros_and_ones~ (list of lists of integers)
#+begin_html
<details>
  <summary>Click to see raw data</summary>
#+end_html

#+begin_src elixir :session bin
digits = [
  "011111101011",
  "101001110000",
  "010010001011",
  "011111100101",
  "111110100011",
  "100000010101",
  "001110110111",
  "101101111100",
  "001101110111",
  "010101000101",
  "010001001110",
  "000010001111",
  "011111001000",
  "011011111011",
  "001101110100",
  "011101111010",
  "000101000000",
  "011010101111",
  "010001010010",
  "110010101001",
  "100000011111",
  "001100001011",
  "011100001000",
  "100101100111",
  "111011101101",
  "011001010100",
  "011110010100",
  "010001110001",
  "111001101110",
  "011001110011",
  "101110111100",
  "101101010110",
  "111111100101",
  "001011100100",
  "101000111101",
  "001101100000",
  "101011011110",
  "111110000111",
  "101101010010",
  "001110100100",
  "110010010101",
  "110000011000",
  "000000000100",
  "100101011110",
  "010101110001",
  "110111100111",
  "110110100101",
  "100110000001",
  "001111000011",
  "000100101000",
  "001100111011",
  "001011010011",
  "000110111010",
  "001110011100",
  "100010001100",
  "011010000001",
  "011100001111",
  "110111111101",
  "011100110101",
  "110111010010",
  "010111001110",
  "110100110101",
  "010010011011",
  "100111010000",
  "011100000111",
  "011100011100",
  "100111000011",
  "111111110001",
  "111011001000",
  "001111111011",
  "011001000100",
  "100110010010",
  "000000100111",
  "101011001010",
  "111111101001",
  "011100101011",
  "101110001101",
  "111111010100",
  "100100000010",
  "111100001011",
  "110000011101",
  "110111100110",
  "011100010101",
  "100111001101",
  "101101100001",
  "000101101101",
  "001001001110",
  "101001100000",
  "101010110001",
  "100001010101",
  "100100001001",
  "111101100001",
  "100000010010",
  "000001101010",
  "000110100011",
  "110011111100",
  "111010101110",
  "011110111000",
  "101011110001",
  "100100100001",
  "000000011011",
  "000100000010",
  "101011010110",
  "011001111111",
  "101111010000",
  "100001101011",
  "110111000110",
  "111000110001",
  "100000000101",
  "100010111011",
  "010100011111",
  "100000011101",
  "110011000010",
  "010111111001",
  "011011101111",
  "110011111110",
  "111011010011",
  "000011010100",
  "111010100000",
  "010100101010",
  "101000000011",
  "000101100000",
  "111101100100",
  "111101101101",
  "010000111111",
  "100001000001",
  "000011010110",
  "110001101001",
  "110100011110",
  "000100001000",
  "110010100011",
  "010000010001",
  "000010000100",
  "100001000000",
  "111110100101",
  "001100001111",
  "001001010001",
  "101011110000",
  "101101001111",
  "110001011110",
  "100011011101",
  "100000110100",
  "110011000100",
  "110101001000",
  "100010010001",
  "001011011010",
  "111000101000",
  "111000100100",
  "001001100010",
  "100100011111",
  "011101101100",
  "001011111001",
  "111000001100",
  "100001101010",
  "101001111011",
  "010101100111",
  "010111100101",
  "010000110110",
  "010011001001",
  "011000110110",
  "000000101111",
  "101110111000",
  "100010100010",
  "001101011100",
  "010010001000",
  "011011110010",
  "001001100000",
  "001110010010",
  "011011100001",
  "100101001110",
  "000100001111",
  "100100110001",
  "100100111010",
  "110000010110",
  "110010011110",
  "110100110000",
  "111011011111",
  "000100111001",
  "010111110000",
  "111001100001",
  "001010011100",
  "010000000110",
  "110010010010",
  "101000001001",
  "100111000100",
  "001001111011",
  "111000111000",
  "000110100010",
  "100001101001",
  "000100111101",
  "111111110111",
  "100001000010",
  "000111000100",
  "110101001111",
  "111101011011",
  "100101111110",
  "010110111101",
  "100010101111",
  "111010111011",
  "110000100101",
  "100111011001",
  "110110100111",
  "010011000011",
  "000011010010",
  "100011011110",
  "001000100101",
  "001001111010",
  "110011001111",
  "101010100111",
  "011111010000",
  "110001011101",
  "010010101110",
  "110011111011",
  "011011101011",
  "111110001011",
  "011001000001",
  "101111000110",
  "111100101110",
  "011011001110",
  "010011010001",
  "000101011001",
  "111100101010",
  "010000100001",
  "101010100100",
  "110110011110",
  "111000111110",
  "100111001100",
  "001000100001",
  "110110110011",
  "111110101111",
  "011110111110",
  "000101101110",
  "000011111111",
  "010101111000",
  "010000001100",
  "010111100001",
  "111010110100",
  "001110000001",
  "101100101111",
  "010110100001",
  "011100000110",
  "110001001000",
  "100110101001",
  "001000111010",
  "101100000101",
  "100110011101",
  "011110101101",
  "011100010100",
  "000011100000",
  "000011101111",
  "100100000001",
  "010001100100",
  "001111000110",
  "101001010110",
  "000011101101",
  "111110001100",
  "101011101110",
  "100001010110",
  "111110110010",
  "000101111111",
  "000111101111",
  "011000011001",
  "101101000101",
  "110110111001",
  "111010011000",
  "000100100110",
  "001110011010",
  "001001011000",
  "101001011001",
  "110111000001",
  "000101110101",
  "100001110101",
  "110010100010",
  "001000010011",
  "000011000100",
  "111100000000",
  "011000100001",
  "000111000110",
  "010101011011",
  "001110011011",
  "110011101001",
  "001111101001",
  "010100100101",
  "011111000100",
  "010000011101",
  "010101001100",
  "001011010010",
  "010001011100",
  "011011010011",
  "001000111101",
  "011011101010",
  "001010010001",
  "010101011000",
  "011110100000",
  "010010001100",
  "000010001011",
  "000000001101",
  "001111000001",
  "100111001011",
  "010000001111",
  "010111111111",
  "110000100100",
  "110111001001",
  "111010011101",
  "001000000010",
  "011110010000",
  "111111111110",
  "011011111111",
  "110010110011",
  "001100101111",
  "101011101010",
  "111111000011",
  "101011000100",
  "011001011000",
  "111001000100",
  "001011001100",
  "011010001101",
  "100100011100",
  "111000101111",
  "111010001001",
  "100110000010",
  "100011000110",
  "001101011011",
  "110000011011",
  "010101010000",
  "010100001000",
  "000011010000",
  "110110001110",
  "111001001010",
  "010011111111",
  "010011110111",
  "111100010100",
  "110101101010",
  "100100011001",
  "111101011000",
  "011000001011",
  "101011100100",
  "111011101100",
  "011010011110",
  "000100010111",
  "010101100011",
  "000001000000",
  "001000110110",
  "100000110110",
  "000100101010",
  "010111001111",
  "100100010110",
  "111000011100",
  "111100010000",
  "001100010100",
  "010001011011",
  "111101110110",
  "100011111101",
  "100001010010",
  "011111101100",
  "010110011110",
  "111100011001",
  "110110010110",
  "110011011011",
  "000100100010",
  "111110110110",
  "010110010110",
  "000000111110",
  "110010101000",
  "011100100100",
  "110011100000",
  "001011100110",
  "001000110111",
  "010011001010",
  "001011001110",
  "100010010010",
  "100011000100",
  "110010111000",
  "100010111000",
  "111010000000",
  "010101001110",
  "110100010100",
  "010011010110",
  "111111000110",
  "000110111001",
  "001011000101",
  "110111011001",
  "101001101001",
  "111001111111",
  "111100000100",
  "100100110100",
  "110100000010",
  "000100011011",
  "100101000000",
  "000000000111",
  "101010100001",
  "010011101000",
  "101101101010",
  "011011001111",
  "000001111011",
  "110100011001",
  "111101100010",
  "000001110101",
  "110011000000",
  "100101110111",
  "101000100100",
  "010110011011",
  "001001101011",
  "000100011010",
  "011011000010",
  "001111100000",
  "101111000101",
  "001101111010",
  "010000101101",
  "011100011011",
  "011001011010",
  "010010101101",
  "100101101011",
  "100111011101",
  "111011001111",
  "001010101011",
  "111101011110",
  "010100000111",
  "001101011001",
  "001101000101",
  "101111000001",
  "010100010000",
  "011011111100",
  "110101101011",
  "000000011001",
  "000000101101",
  "101100010010",
  "101110011101",
  "001110010011",
  "001011000111",
  "111101001110",
  "010101101010",
  "001100010000",
  "100101010101",
  "111101110111",
  "001101010001",
  "111001100101",
  "001101101101",
  "111100101000",
  "100001100011",
  "011000011010",
  "101111000111",
  "101000010100",
  "000011001001",
  "111010101101",
  "100110010100",
  "011001111000",
  "001001100110",
  "010100110000",
  "101100001010",
  "111100100001",
  "000110010000",
  "100100000100",
  "011100101000",
  "100111101011",
  "001111100001",
  "111001011001",
  "000000010101",
  "011000010011",
  "100111000010",
  "000100001101",
  "110100010110",
  "001110001111",
  "001101110010",
  "110110101000",
  "100111011010",
  "011001110111",
  "011111011111",
  "101111111100",
  "001100100110",
  "101101111111",
  "010000111101",
  "010000000111",
  "010110000100",
  "111101001000",
  "011101101110",
  "010011011111",
  "000000101100",
  "101011100000",
  "010111111010",
  "111001011000",
  "001000100110",
  "110000001010",
  "110101011011",
  "101001010000",
  "000000110110",
  "000100101100",
  "001000010010",
  "101010010000",
  "011100010001",
  "001100101010",
  "010110001010",
  "011000100110",
  "110001111010",
  "100001011100",
  "010001111010",
  "111101010100",
  "100001111010",
  "000100011000",
  "011110111100",
  "111110010000",
  "000011111100",
  "001010101100",
  "011100001101",
  "101100001101",
  "111010000111",
  "001110100011",
  "100001001110",
  "110011001010",
  "000101111110",
  "111101010010",
  "101000001110",
  "001100111101",
  "111110101010",
  "001101001010",
  "000011110011",
  "000001010110",
  "110111010110",
  "110011111001",
  "110111001110",
  "011100111001",
  "111101100011",
  "010110001000",
  "100100100101",
  "111001110001",
  "001101101011",
  "111000101110",
  "011000100010",
  "001100001010",
  "101001011101",
  "101001000110",
  "101001110100",
  "100010010011",
  "111011110011",
  "011100111101",
  "100110010000",
  "111110001010",
  "101011111010",
  "101110101100",
  "100010100000",
  "110101001011",
  "111001101111",
  "101010110000",
  "110011010110",
  "101001110101",
  "001011011100",
  "111100011110",
  "011000111110",
  "011100111100",
  "001101000011",
  "101110010111",
  "110011101110",
  "001100011100",
  "001100001000",
  "010000010011",
  "110011111000",
  "101010001001",
  "001001110110",
  "111000000010",
  "101110100110",
  "010000000011",
  "100100001000",
  "000000101010",
  "110000111010",
  "000101110111",
  "110101100011",
  "010111101011",
  "010110100100",
  "011010100111",
  "010110111100",
  "011010011100",
  "001110110100",
  "010110100000",
  "010010111100",
  "001001100001",
  "101010000001",
  "100010101011",
  "010011100010",
  "110010001001",
  "111110110101",
  "111001100110",
  "101010011101",
  "000100110100",
  "011000111100",
  "000001011010",
  "100100001010",
  "110010001100",
  "101111001101",
  "011101101001",
  "001011111101",
  "101001011111",
  "111011001110",
  "001000010000",
  "000000000011",
  "011100100000",
  "000101001010",
  "100101100100",
  "101000100101",
  "101011111000",
  "100101111010",
  "100011110110",
  "011110010011",
  "101111110101",
  "000000110000",
  "111101011010",
  "110001110001",
  "100000001110",
  "101101000000",
  "110110010100",
  "100011000111",
  "011000000100",
  "011010110110",
  "100100001100",
  "011000110001",
  "000011010001",
  "011010111111",
  "011110001110",
  "111111000000",
  "000111011001",
  "110100000100",
  "110101000111",
  "011001101010",
  "010000100010",
  "110010000100",
  "011011001010",
  "010100011000",
  "111000100001",
  "011001110010",
  "011111010111",
  "001000110001",
  "110010011101",
  "001110010001",
  "001011011000",
  "000111010000",
  "010010011010",
  "011110110110",
  "010010000010",
  "000000111000",
  "101110101010",
  "110111010001",
  "010010000100",
  "001110010100",
  "101011110011",
  "001000100100",
  "110000110000",
  "100011000101",
  "000011100010",
  "010101111100",
  "110110110100",
  "111110000100",
  "011010110100",
  "001111001111",
  "101010111011",
  "010010000001",
  "001011101101",
  "001001000011",
  "000111100100",
  "100111111000",
  "011111001011",
  "011110101001",
  "101011101101",
  "101110111011",
  "111111101000",
  "110000100011",
  "011101010011",
  "111100000111",
  "011110101000",
  "001000110101",
  "110101111011",
  "010101000001",
  "110111011011",
  "000100000101",
  "011010010101",
  "000111010010",
  "100011001101",
  "001011011011",
  "001001111111",
  "100100110010",
  "101100101000",
  "110111010011",
  "111000011001",
  "100000001111",
  "001001111001",
  "001010010000",
  "011010011111",
  "111100010001",
  "010101001010",
  "000100001011",
  "011110000100",
  "101101110101",
  "011100001010",
  "100110110110",
  "001110111100",
  "010010101010",
  "000101011111",
  "101101010111",
  "100110100000",
  "100110100001",
  "010110010010",
  "011010100010",
  "101001110110",
  "011110000111",
  "001001010010",
  "010011001101",
  "011000011000",
  "101001100011",
  "011111100100",
  "110111110111",
  "010010110001",
  "100111000111",
  "100001100000",
  "100101001001",
  "001010110011",
  "101111110010",
  "111100101100",
  "100011101111",
  "010010111101",
  "010001010101",
  "100011001011",
  "101111100010",
  "101011010011",
  "101111001000",
  "111111111111",
  "101001111101",
  "011111110010",
  "101111010010",
  "011000000010",
  "101110101101",
  "011011100101",
  "111110011111",
  "110101110101",
  "000001011110",
  "110110110111",
  "001001001000",
  "000100111011",
  "011101011111",
  "101110000111",
  "100011100100",
  "011000110011",
  "110100011111",
  "101010001011",
  "000000010011",
  "110101010011",
  "001101010000",
  "011011010101",
  "000101100110",
  "100110001111",
  "100011010101",
  "111100101001",
  "101111010001",
  "000011001000",
  "100110000111",
  "101001111010",
  "000110000110",
  "010100101011",
  "101011111100",
  "000111000010",
  "111000100111",
  "110010101100",
  "111000000100",
  "101101000001",
  "110101001110",
  "001100100100",
  "011000011111",
  "000010111100",
  "100010101010",
  "000001011111",
  "011001100001",
  "010010000111",
  "111100111010",
  "110100011100",
  "101000101111",
  "010110001001",
  "101111100110",
  "101101110110",
  "001010101000",
  "000101110110",
  "101101111001",
  "110000001001",
  "110101100000",
  "011100110110",
  "101110010101",
  "111001101100",
  "101000011011",
  "011001010110",
  "101111011110",
  "001110101111",
  "000100110110",
  "101110100111",
  "001010010100",
  "001000000000",
  "100100001110",
  "101011000010",
  "001011111011",
  "011111100111",
  "100001001100",
  "000001101100",
  "110001101101",
  "010101001001",
  "000000011110",
  "010100111001",
  "011111100010",
  "011000010100",
  "000001111101",
  "011110011101",
  "010001010111",
  "001100110001",
  "101111001010",
  "100100010000",
  "101011101011",
  "011110001001",
  "001101100011",
  "010010100100",
  "111010101010",
  "011010100011",
  "010100011010",
  "001000000110",
  "100011001100",
  "011111000010",
  "111011011101",
  "111101010111",
  "000101011110",
  "101011101001",
  "100111110001",
  "000000011101",
  "100010001010",
  "000000010000",
  "111001100100",
  "101100111000",
  "100011000010",
  "010011010111",
  "011110111101",
  "111000110101",
  "001000001001",
  "111001100111",
  "010001001010",
  "011101110101",
  "001111111111",
  "000101001100",
  "010011010000",
  "000111111101",
  "100101110100",
  "110011110110",
  "100110111101",
  "011011101001",
  "001111101111",
  "110010001110",
  "110100111101",
  "001111101110",
  "100110100100",
  "010011001111",
  "110001011000",
  "100101110010",
  "101101101100",
  "001010111111",
  "111000000111",
  "110100101011",
  "100100000000",
  "100100111101",
  "110110000000",
  "110010010100",
  "111100110000",
  "101110001100",
  "110001111100",
  "111001100000",
  "111011100011",
  "100100011101",
  "000111110111",
  "011011000100",
  "111001101000",
  "000001011011",
  "100000101101",
  "100011010100",
  "010111000000",
  "011111001101",
  "010000101011",
  "110001010110",
  "001101100111",
  "111101111011",
  "000100101001",
  "000000100110",
  "011011111110",
  "001011010001",
  "101110010010",
  "010101101101",
  "100111011011",
  "100001111000",
  "011110011011",
  "001001110011",
  "010100011011",
  "001001110010",
  "111101010101",
  "010111011001",
  "000001001110",
  "010111010110",
  "000000100000",
  "000001101101",
  "001110101000",
  "100100101001",
  "111100001010",
  "110110101010",
  "000101111000",
  "011010100000",
  "100111101111",
  "110000110110",
  "001001000111",
  "100110101011",
  "010011100000",
  "010110011101",
  "111110100111",
  "110000000001",
  "011101001101",
  "101110100100",
  "011110011010",
  "000111001110",
  "110100001100",
  "110011011000",
  "000001010010",
  "011111010010",
  "011111010101",
  "000101110011",
  "111001011111",
  "001111110101",
  "110111000011",
  "001011101100",
  "110010000000",
  "100001011010",
  "001111110111",
  "111110011110",
  "110111100001",
  "001010000001",
  "110111101110",
  "001100000110",
  "000110001001",
  "110001101110",
  "111110101001",
  "111101101111",
  "010110110100",
  "100101011010",
  "011111110110",
  "001110111001",
  "011000101110",
  "010001010001",
  "101000000000",
  "001010000110",
  "011110111001",
  "010000001011",
  "101110110101",
  "100011011001",
  "000100111000",
  "011000111111",
  "010010100010",
  "101100110110",
  "011001010101",
  "111000001101",
  "111101011101",
  "111011010101",
  "101100101110",
  "100101010001",
  "001011000001",
  "101110111010",
  "100010110100",
  "010011001100",
  "100001100110",
  "000101010111",
  "001110110010",
  "100100010101",
  "000100100000",
  "100101101101",
  "010101000011",
  "000100011101",
  "101000001100",
  "111111101111",
  "110000111011",
  "001011100010",
  "100100101100",
  "011011100110",
  "101010110101",
  "000111110100",
  "101111100100",
  "001001111101",
  "010000111000",
  "000000101000",
  "001000010111",
  "001011010000",
  "110010111011",
  "100111101101",
  "011100111011",
  "101100101001",
  "010010000011",
  "100110001110",
  "101000011100",
  "010111001000",
  "011111111001",
  "010100111111",
  "011000110111",
  "000001100101",
  "100101100010",
  "001111110000",
  "100000011011"
]
#+end_src


  #+RESULTS:
  #+begin_example
  ["011111101011", "101001110000", "010010001011", "011111100101", "111110100011", 
   "100000010101", "001110110111", "101101111100", "001101110111", "010101000101", 
   "010001001110", "000010001111", "011111001000", "011011111011", "001101110100", 
   "011101111010", "000101000000", "011010101111", "010001010010", "110010101001", 
   "100000011111", "001100001011", "011100001000", "100101100111", "111011101101", 
   "011001010100", "011110010100", "010001110001", "111001101110", "011001110011", 
   "101110111100", "101101010110", "111111100101", "001011100100", "101000111101", 
   "001101100000", "101011011110", "111110000111", "101101010010", "001110100100", 
   "110010010101", "110000011000", "000000000100", "100101011110", "010101110001", 
   "110111100111", "110110100101", "100110000001", "001111000011", "000100101000", 
   ...]
  #+end_example

#+begin_html
</details>
#+end_html

#+begin_src elixir :session bin
zeros_and_ones = digits
|> Enum.map(fn (n) ->  Enum.map(String.codepoints(n), &String.to_integer/1) end)
#+end_src

#+RESULTS:
#+begin_example
  [
    [0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1],
    [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0],
    [0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1],
    [0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1],
    [1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1],
    [1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1],
    [0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1],
    [1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0],
    [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1],
    [0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1],
    [0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0],
    [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1],
    [0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0],
    [0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1],
    [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0],
    [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0],
    [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0],
    [0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1],
    [0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0],
    [1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1],
    [0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1],
    [0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0],
    [1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1],
    [1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1],
    [0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0],
    [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0],
    [0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1],
    [1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0],
    [0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1],
    [1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0],
    [1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0],
    [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1],
    [0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0],
    [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1],
    [0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0],
    [1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0],
    [1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1],
    [1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, ...],
    [0, 0, 1, 1, 1, 0, 1, 0, 0, 1, ...],
    [1, 1, 0, 0, 1, 0, 0, 1, 0, ...],
    [1, 1, 0, 0, 0, 0, 0, 1, ...],
    [0, 0, 0, 0, 0, 0, 0, ...],
    [1, 0, 0, 1, 0, 1, ...],
    [0, 1, 0, 1, 0, ...],
    [1, 1, 0, 1, ...],
    [1, 1, 0, ...],
    [1, 0, ...],
    [0, ...],
    [...],
    ...
  ]
#+end_example

** pt 1 :: power consumption
*** helpers
#+begin_src elixir :session bin
defmodule AOC.Diagnostics do
  def to_decimal(n) do
    n
    |> Enum.reduce("", &(&2 <> Integer.to_string(&1)))
    |> Integer.parse(2)
    |> elem(0)
  end
end
#+end_src

*** solution
#+begin_src elixir :session bin
halfway = Enum.count(digits) / 2

count_of_ones_by_position = zeros_and_ones
|> Enum.reduce([0,0,0,0,0,0,0,0,0,0,0,0], fn
  (digits, counts) ->
    Enum.zip_with([digits, counts], fn [x, y] -> x + y end)
end)

gamma_rate = count_of_ones_by_position
|> Enum.map(&(if &1 > halfway, do: 1, else: 0))
|> AOC.Diagnostics.to_decimal

epsilon_rate = count_of_ones_by_position
|> Enum.map(&(if &1 < halfway, do: 1, else: 0))
|> AOC.Diagnostics.to_decimal

gamma_rate * epsilon_rate
#+end_src

#+RESULTS:
: 2743844

** pt 2 :: is life supported?
*** helpers
#+begin_src elixir :session bin
defmodule AOC.LifeSupport do
  def filter_by_most_common_bits(numbers), do: winnow(numbers, :most_common)
  def filter_by_least_common_bits(numbers), do: winnow(numbers, :least_common)

  defp winnow(numbers, strategy) do
    filter = filter_digit_for_index(numbers, 0, strategy)
    winnow_by(numbers, filter, 0, strategy)
  end

  defp winnow_by([number], _filter, _index, _dominant_digit), do: number

  defp winnow_by(numbers, filter, index, strategy) do
    keepers = numbers
    |> Enum.group_by(&(Enum.at(&1, index)))
    |> Map.get(filter)

    next_filter = keepers
    |> filter_digit_for_index(index + 1, strategy)

    winnow_by(keepers, next_filter, index + 1, strategy)
  end

  # if there is only one number, it will be returned by the next call, so the filter doesn't matter one whit
  defp filter_digit_for_index([_number], _index, _strategy), do: 0

  defp filter_digit_for_index(numbers, index, :most_common) do
    numbers
    |> Enum.map(&(Enum.at(&1, index)))
    |> Enum.sum()
    |> then(&(if &1 >= (length(numbers) / 2), do: 1, else: 0))
  end

  defp filter_digit_for_index(numbers, index, :least_common) do
    numbers
    |> Enum.map(&(Enum.at(&1, index)))
    |> Enum.sum()
    |> then(&(if &1 >= (length(numbers) / 2), do: 0, else: 1))
  end
end
#+end_src

*** solution
#+begin_src elixir :session bin
oxygen_generator_rating = zeros_and_ones
|> AOC.LifeSupport.filter_by_most_common_bits
|> AOC.Diagnostics.to_decimal()

co2_scrubber_rating = zeros_and_ones
|> AOC.LifeSupport.filter_by_least_common_bits
|> AOC.Diagnostics.to_decimal()

oxygen_generator_rating * co2_scrubber_rating
#+end_src

#+RESULTS:
: 6677951
